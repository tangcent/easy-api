#[module]*
#Get the module from the comment,group the apis
module=#module

#[ignore]*
#Ignore class/api
ignore=#ignore

#[deprecated_java]*
#deprecated info(java)

method.doc[#deprecated]=groovy:"\n「deprecated」" + it.doc("deprecated")
method.doc[@java.lang.Deprecated]=「deprecated」

method.doc[groovy:it.containingClass().hasDoc("deprecated")]=groovy:"\n「deprecated」" + it.containingClass().doc("deprecated")
method.doc[groovy:it.containingClass().hasAnn("java.lang.Deprecated")]=「deprecated」

field.doc[#deprecated]=groovy:"\n「deprecated」" + it.doc("deprecated")
field.doc[@java.lang.Deprecated]=「deprecated」

#[deprecated_kotlin]*
#deprecated info(kotlin)

method.doc[@kotlin.Deprecated]=groovy:"\n「deprecated」" + it.ann("kotlin.Deprecated","message")
method.doc[groovy:it.containingClass().hasAnn("kotlin.Deprecated")]=groovy:"\n「deprecated」 " + it.containingClass().ann("kotlin.Deprecated","message")
field.doc[@kotlin.Deprecated]=groovy:"\n「deprecated」" + it.ann("kotlin.Deprecated","message")

#[Jackson]*
#Support for Jackson annotations
field.name=@com.fasterxml.jackson.annotation.JsonProperty#value
field.ignore=@com.fasterxml.jackson.annotation.JsonIgnore#value

#[Jackson_JsonIgnoreProperties]
#Support for Jackson annotation JsonIgnoreProperties

json.cache.disable=true
field.ignore=groovy:it.containingClass().annValue("com.fasterxml.jackson.annotation.JsonIgnoreProperties")?.contains(it.name())
json.group=@com.fasterxml.jackson.annotation.JsonIgnoreProperties
field.parse.before[@com.fasterxml.jackson.annotation.JsonIgnoreProperties]=groovy:```
    def properties = it.annValue("com.fasterxml.jackson.annotation.JsonIgnoreProperties")
    for(property in properties){
        def path = fieldContext.property(property)
        session.set("json-ignore", path, true)
    }
```
field.parse.after[@com.fasterxml.jackson.annotation.JsonIgnoreProperties]=groovy:```
    def properties = it.annValue("com.fasterxml.jackson.annotation.JsonIgnoreProperties")
    for(property in properties){
        def path = fieldContext.property(property)
        session.remove("json-ignore", path)
    }
```
field.ignore=groovy:```
    return session.get("json-ignore", fieldContext.path())
```

#[Gson]*
#Support for Gson annotations
field.name=@com.google.gson.annotations.SerializedName#value
field.ignore=!@com.google.gson.annotations.Expose#serialize

#[ignore_transient_field]*
#ignore transient field
field.ignore=groovy:it.hasModifier("transient")

#[converts]*
#The ObjectId and Date are parsed as strings
json.rule.convert[org.bson.types.ObjectId]=java.lang.String
json.rule.convert[java.util.Date]=java.lang.String
json.rule.convert[java.sql.Timestamp]=java.lang.String
json.rule.convert[java.time.LocalDateTime]=java.lang.String
json.rule.convert[java.time.LocalDate]=java.lang.String

#[spring_Entity]*
#resolve HttpEntity/RequestEntity/ResponseEntity/DeferredResult
###set resolveProperty = false
json.rule.convert[#regex:org.springframework.http.HttpEntity]=java.lang.Object
json.rule.convert[#regex:org.springframework.http.HttpEntity<(.*?)>]=${1}
json.rule.convert[#regex:org.springframework.http.RequestEntity<(.*?)>]=${1}
json.rule.convert[#regex:org.springframework.http.RequestEntity]=java.lang.Object
json.rule.convert[#regex:org.springframework.http.ResponseEntity<(.*?)>]=${1}
json.rule.convert[#regex:org.springframework.http.ResponseEntity]=java.lang.Object
json.rule.convert[#regex:org.springframework.web.context.request.async.DeferredResult<(.*?)>]=${1}
json.rule.convert[#regex:org.springframework.web.context.request.async.DeferredResult]=java.lang.Object
###set resolveProperty = true

#[spring_webflux]
#resolve Mono/Flux
###set resolveProperty = false
json.rule.convert[#regex:reactor.core.publisher.Mono<(.*?)>]=${1}
json.rule.convert[#regex:reactor.core.publisher.Mono]=java.lang.Object
json.rule.convert[#regex:reactor.core.publisher.Flux<(.*?)>]=java.util.List<${1}>
json.rule.convert[#regex:reactor.core.publisher.Flux]=java.util.List<java.lang.Object>
###set resolveProperty = true

#[spring.validations]*
#Support spring.validations
field.required=@org.springframework.lang.NonNull
param.ignore=groovy:it.type().isExtend("org.springframework.validation.BindingResult")

#[spring.ui]*
#Support spring.ui
param.ignore=groovy:it.type().name()=="org.springframework.ui.Model"
param.ignore=groovy:it.type().name()=="org.springframework.ui.ModelMap"
param.ignore=groovy:it.type().name()=="org.springframework.web.servlet.ModelAndView"

#[javax.validation]*
#Support for javax.validation annotations
param.required=@javax.validation.constraints.NotBlank
field.required=@javax.validation.constraints.NotBlank
param.required=@javax.validation.constraints.NotNull
field.required=@javax.validation.constraints.NotNull
param.required=@javax.validation.constraints.NotEmpty
field.required=@javax.validation.constraints.NotEmpty

#[javax.validation(grouped)]
#Support for javax.validation annotations(grouped)
json.cache.disable=true
json.group=groovy:session.get("json-group")
param.before=groovy:```
    session.set("json-group", it.annValue("org.springframework.validation.annotation.Validated"))
```
param.after=groovy:```
    session.remove("json-group")
```
param.required=@javax.validation.constraints.NotBlank
param.required=@javax.validation.constraints.NotNull
param.required=@javax.validation.constraints.NotEmpty
field.required[@javax.validation.constraints.NotBlank]=groovy:```
    it.annMaps("javax.validation.constraints.NotBlank")?.any{tool.equalOrIntersect(session.get("json-group"),it["groups"])}
```
field.required[@javax.validation.constraints.NotNull]=groovy:```
    it.annMaps("javax.validation.constraints.NotNull")?.any{tool.equalOrIntersect(session.get("json-group"),it["groups"])}
```
field.required[@javax.validation.constraints.NotEmpty]=groovy:```
    it.annMaps("javax.validation.constraints.NotEmpty")?.any{tool.equalOrIntersect(session.get("json-group"),it["groups"])}
```

#[is_file]*
#Support spring file
type.is_file=groovy:it.isExtend("org.springframework.web.multipart.MultipartFile")

#[import_spring_properties]
#Import spring properties
###set ignoreNotFoundFile = true
###set ignoreUnresolved = true
properties.additional=${module_path}/src/main/resources/application.properties
properties.additional=${module_path}/src/main/resources/application.yml
properties.additional=${module_path}/src/main/resources/application.yaml
###set ignoreUnresolved = false
###set ignoreNotFoundFile = false

#[resolve_spring_properties]
#Resolve spring properties
###set ignoreUnresolved = true
class.prefix.path=${server.servlet.context-path}
###set ignoreUnresolved = false

#[ignore_serialVersionUID]*
#ignore serialVersionUID
constant.field.ignore=groovy:it.name()=="serialVersionUID"

#[private_protected_field_only]
#only keep private/protected field
field.ignore=groovy:!(it.hasModifier("private")||it.hasModifier("protected"))

#[support_enum_common]*
#support the common ways to use enum
enum.use.name=groovy:it.type().name()=="java.lang.String"
enum.use.ordinal=groovy:it.type().name()=="int"
enum.use.ordinal=groovy:it.type().name()=="java.lang.Integer"